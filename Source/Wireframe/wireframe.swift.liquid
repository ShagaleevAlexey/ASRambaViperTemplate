//
//  {{ module_info.file_name }}
//  {{ module_info.project_name }}, {{ module_info.name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import UIKit

class {{ prefix }}{{ module_info.name }}Wireframe {

    /// Custom view of this VIPER module (if nil, default view for this module will be used)
    var customView: (UIViewController & {{ prefix }}{{ module_info.name }}ViewInput)?

    /// Custom presenter of this VIPER module (if nil, default presenter for this module will be used)
    var customPresenter: {{ prefix }}Presenter & ({{ prefix }}{{ module_info.name }}InteractorOutput & {{ prefix }}{{ module_info.name }}ViewOutput & {{ prefix }}{{ module_info.name }}PresenterInput)?

    /// Custom interactor of this VIPER module (if nil, default interactor for this module will be used)
    var customInteractor: {{ prefix }}{{ module_info.name }}InteractorInput?

    /// Custom router of this VIPER module (if nil, default router for this module will be used)
    var customRouter: {{ prefix }}{{ module_info.name }}RouterInput?

    /// Module initialization, after calling this method, you can use presenter's input view property to get access to module's view controller
    func initModule() -> {{ prefix }}{{ module_info.name }}PresenterInput {
        let view = customView ?? (UIStoryboard(name: "Main", bundle: nil).instantiateViewController(withIdentifier: String(describing: {{ prefix }}{{ module_info.name }}View.self).components(separatedBy: ".").last!) as! {{ prefix }}{{ module_info.name }}View)
        let router = customRouter ?? {{ prefix }}{{ module_info.name }}Router()
        let presenter = customPresenter ?? {{ prefix }}{{ module_info.name }}Presenter()
        var interactor = customInteractor ?? {{ prefix }}{{ module_info.name }}Interactor()
        presenter.view = view
        presenter.router = router
        presenter.interactor = interactor
        interactor.output = presenter
        view.output = presenter
        return presenter
    }

}
